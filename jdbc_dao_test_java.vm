##--------------------------------------------------------------------------------------------------------
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
#set( $keyValues   = $fn.buildValues($entity.keyAttributes,     1) )
#set( $dataValues  = $fn.buildValues($entity.nonKeyAttributes , 1) )
#set( $dataValues2 = $fn.buildValues($entity.nonKeyAttributes , 2) )
#set( $keyValues3  = $fn.buildValues($entity.keyAttributes,     3) )
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder($TEST_SRC)};

import java.sql.SQLException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.TestExecutionListeners;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import pg.cui.pwrmoja.MigratorApplication;
import ${ENTITY_PKG}.${entity.name};

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = MigratorApplication.class)
@TestPropertySource(locations = "classpath:application_test.properties")
@Slf4j
@TestExecutionListeners(MockitoTestExecutionListener.class)
public class ${entity.name}DAOTest extends AbstractTestNGSpringContextTests {

    @Autowired
    private JdbcTemplate jdbcTemplate;
    @Autowired
    private ${entity.name}DAO dao;
#set( $createTableLines = $h2.ddlCreateTable($entity) )

	private static final String CREATE_TABLE = 
#foreach( $line in $createTableLines )
			#if ( $foreach.count > 1 )+#end "${line}"
#end 
			;

	@BeforeClass
	public void init() {
		this.jdbcTemplate.execute(CREATE_TABLE) ;
	}

	@Test
	public void testDAO() throws SQLException {
    	System.out.println("test ${entity.name}DAO ");

    	Assert.assertTrue( dao.count() == 0 );

    	${entity.name} $uncapitalizedEntityName = new ${entity.name}();
		//--- Key values
#if ( $entity.hasAutoIncrementedKey() )
		// Auto-incremented key : nothing to set in the Primary Key
#else
#foreach( $attribute in $entity.keyAttributes )
		${uncapitalizedEntityName}.${attribute.setter}($keyValues.getValue($attribute.name)); // "$attribute.databaseName" : $attribute.fullType
#end
#end
		//--- Other values
#foreach( $attribute in $entity.nonKeyAttributes )
		${uncapitalizedEntityName}.${attribute.setter}($dataValues.getValue($attribute.name)); // "$attribute.databaseName" : $attribute.fullType
#end

    	//--- INSERT
    	System.out.println("Insert : " + ${uncapitalizedEntityName} );
#if ( $entity.hasAutoIncrementedKey() )
    	$entity.autoincrementedKeyAttribute.type pkAutoIncr = dao.insert(${uncapitalizedEntityName});
#foreach( $attribute in $entity.keyAttributes )
    	${uncapitalizedEntityName}.${attribute.setter}( pkAutoIncr );
#end
    	Assert.assertTrue( dao.exists(pkAutoIncr) );
#else
    	dao.insert(${uncapitalizedEntityName});
    	Assert.assertTrue( dao.exists($keyValues.allValues) );
#end
    	Assert.assertTrue( dao.count() == 1 );
    	Assert.assertTrue( dao.exists($uncapitalizedEntityName) );
    	
    	//--- FIND
    	System.out.println("Find..." );
#if ( $entity.hasAutoIncrementedKey() )
    	${entity.name} ${uncapitalizedEntityName}2 = dao.find(pkAutoIncr);
#else
    	${entity.name} ${uncapitalizedEntityName}2 = dao.find($keyValues.allValues);
#end
    	Assert.assertNotNull(${uncapitalizedEntityName}2);
#if ( $entity.hasAutoIncrementedKey() == false )
#foreach( $attribute in $entity.keyAttributes )
		Assert.assertTrue(  ${uncapitalizedEntityName}.${attribute.getter}().equals($keyValues.getValue($attribute.name)) ) ;
#end
#end
    	Assert.assertTrue( dao.exists(${uncapitalizedEntityName}2) ) ;
    	
#if ( $entity.nonKeyAttributesCount > 0 )
    	//--- UPDATE
		//--- Change values
#foreach( $attribute in $entity.nonKeyAttributes )
		${uncapitalizedEntityName}2.${attribute.setter}($dataValues2.getValue($attribute.name)); // "$attribute.databaseName" : $attribute.fullType
#end
    	System.out.println("Update : " + ${uncapitalizedEntityName}2 );
    	Assert.assertTrue( dao.update(${uncapitalizedEntityName}2) == 1 );
#else
    	//--- NO UPDATE FOR THIS ENTITY (ALL COLUMNS IN PRIMARY KEY)
#end
    	
    	//--- LOAD
    	${entity.name} ${uncapitalizedEntityName}3 = new ${entity.name}();
#foreach( $attribute in $entity.keyAttributes )
#if ( $entity.hasAutoIncrementedKey() )
    	${uncapitalizedEntityName}3.${attribute.setter}( pkAutoIncr );
#else
    	${uncapitalizedEntityName}3.${attribute.setter}($keyValues.getValue($attribute.name));
#end
#end
    	Assert.assertTrue( dao.load(${uncapitalizedEntityName}3) );
    	System.out.println("Loaded : " + ${uncapitalizedEntityName}3 );
#foreach( $attribute in $entity.nonKeyAttributes )
		Assert.assertEquals(${uncapitalizedEntityName}2.${attribute.getter}(), ${uncapitalizedEntityName}3.${attribute.getter}() ); 
#end


#foreach( $attribute in $entity.keyAttributes )
    	${uncapitalizedEntityName}3.${attribute.setter}($keyValues3.getValue($attribute.name));
#end
    	Assert.assertFalse( dao.load(${uncapitalizedEntityName}3) );
    	
    	//--- DELETE
    	System.out.println("Delete : " + ${uncapitalizedEntityName}2 );
    	Assert.assertTrue( dao.delete(${uncapitalizedEntityName}2) == 1 );
    	Assert.assertTrue( dao.delete(${uncapitalizedEntityName}2) == 0 );
    	Assert.assertTrue( dao.delete($keyValues.allValues) == 0 );

    	Assert.assertTrue( dao.count() == 0 );
    	Assert.assertFalse( dao.exists($keyValues.allValues) ) ;
    	Assert.assertFalse( dao.exists(${uncapitalizedEntityName}2) ) ;
    	${uncapitalizedEntityName}2 = dao.find($keyValues.allValues);
    	Assert.assertNull( ${uncapitalizedEntityName}2 );
    	
    	System.out.println("Normal end of DAO test." );
	}
}
